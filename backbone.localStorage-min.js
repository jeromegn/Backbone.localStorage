// A simple module to replace `Backbone.sync` with *localStorage*-based
// persistence. Models are given GUIDS, and saved into a JSON object. Simple
// as that.
// Generate four random hex digits.
function guid(){return S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4()}function S4(){return((1+Math.random())*65536|0).toString(16).substring(1)}window.Store=function(a){this.name=a;var b=localStorage.getItem(this.name);this.records=b&&b.split(",")||[]};var _=this._;!_&&typeof require!="undefined"&&(_=require("underscore")._);var Backbone=this.Backbone;!Backbone&&typeof require!="undefined"&&(Backbone=require("backbone")),_.extend(Store.prototype,{save:function(){localStorage.setItem(this.name,this.records.join(","))},create:function(a){a.id||(a.id=a.attributes.id=guid()),localStorage.setItem(this.name+"-"+a.id,JSON.stringify(a)),this.records.push(a.id.toString()),this.save();return a},update:function(a){localStorage.setItem(this.name+"-"+a.id,JSON.stringify(a)),_.include(this.records,a.id.toString())||this.records.push(a.id.toString()),this.save();return a},find:function(a){return JSON.parse(localStorage.getItem(this.name+"-"+a.id))},findAll:function(){return _.map(this.records,function(a){return JSON.parse(localStorage.getItem(this.name+"-"+a))},this)},destroy:function(a){localStorage.removeItem(this.name+"-"+a.id),this.records=_.reject(this.records,function(b){return b==a.id.toString()}),this.save();return a}}),Backbone.sync=function(a,b,c){var d,e=b.localStorage||b.collection.localStorage;switch(a){case"read":d=b.id?e.find(b):e.findAll();break;case"create":d=e.create(b);break;case"update":d=e.update(b);break;case"delete":d=e.destroy(b)}d?c.success(d):c.error("Record not found")}